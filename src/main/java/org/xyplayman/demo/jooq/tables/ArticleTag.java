/*
 * This file is generated by jOOQ.
 */
package org.xyplayman.demo.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.xyplayman.demo.jooq.Demo;
import org.xyplayman.demo.jooq.Indexes;
import org.xyplayman.demo.jooq.Keys;
import org.xyplayman.demo.jooq.tables.records.ArticleTagRecord;


/**
 * 文章和标签关联
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleTag extends TableImpl<ArticleTagRecord> {

    private static final long serialVersionUID = 29487996;

    /**
     * The reference instance of <code>demo.article_tag</code>
     */
    public static final ArticleTag ARTICLE_TAG = new ArticleTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleTagRecord> getRecordType() {
        return ArticleTagRecord.class;
    }

    /**
     * The column <code>demo.article_tag.article_id</code>.
     */
    public final TableField<ArticleTagRecord, ULong> ARTICLE_ID = createField(DSL.name("article_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>demo.article_tag.tag_id</code>.
     */
    public final TableField<ArticleTagRecord, ULong> TAG_ID = createField(DSL.name("tag_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>demo.article_tag</code> table reference
     */
    public ArticleTag() {
        this(DSL.name("article_tag"), null);
    }

    /**
     * Create an aliased <code>demo.article_tag</code> table reference
     */
    public ArticleTag(String alias) {
        this(DSL.name(alias), ARTICLE_TAG);
    }

    /**
     * Create an aliased <code>demo.article_tag</code> table reference
     */
    public ArticleTag(Name alias) {
        this(alias, ARTICLE_TAG);
    }

    private ArticleTag(Name alias, Table<ArticleTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleTag(Name alias, Table<ArticleTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文章和标签关联"));
    }

    public <O extends Record> ArticleTag(Table<O> child, ForeignKey<O, ArticleTagRecord> key) {
        super(child, key, ARTICLE_TAG);
    }

    @Override
    public Schema getSchema() {
        return Demo.DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_TAG_PRIMARY);
    }

    @Override
    public UniqueKey<ArticleTagRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_TAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ArticleTagRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleTagRecord>>asList(Keys.KEY_ARTICLE_TAG_PRIMARY);
    }

    @Override
    public ArticleTag as(String alias) {
        return new ArticleTag(DSL.name(alias), this);
    }

    @Override
    public ArticleTag as(Name alias) {
        return new ArticleTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleTag rename(String name) {
        return new ArticleTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleTag rename(Name name) {
        return new ArticleTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, ULong> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
